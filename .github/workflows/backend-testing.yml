name: Backend Testing

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - 'backend/**'
      - '.docker/**'
      - '.github/workflows/**'

# 連続してpushすると一つ前の実行中のjobが停止される設定
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-testing:
    runs-on: ubuntu-latest
    # docker-compose用の環境変数
    env:
      PROJECT_NAME: "tennis-track"
      SOURCE_DIR_NAME: "backend"
      APP_HOST_PORT: 9000
      APP_VITE_HOST_PORT: 5173
      NGINX_HOST_PORT: 80
      DB_HOST_PORT: 3306
      REDIS_HOST_PORT: 6379
      MINIO_HOST_PORT1: 9999
      MINIO_HOST_PORT2: 9001
      MYSQL_DB_NAME: "tennis_track_db"
      MYSQL_USER_NAME: "tennis_track_user"
      MYSQL_PASSWORD: "password"
      MYSQL_ROOT_PASSWORD: "password"

      IMAGE_CACHE_DIR: /tmp/docker-img
      IMAGE_CACHE_KEY: cache-docker-image
      CACHE_VER: 1 # キャッシュをクリアしたい時は数値に＋1する

      # docker-composeのサービス名を入れる
      APP_IMAGE_TAG: tennis-track_app
      NGINX_IMAGE_TAG: tennis-track_nginx
      MYSQL_IMAGE_TAG: tennis-track_db

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ************* Create Cache *************
      - name: Cache Docker layers
        id: cache-docker
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-${{ env.IMAGE_CACHE_KEY }}-${{ env.CACHE_VER }}-${{ hashFiles('docker-compose.yaml') }}
          restore-keys: ${{ runner.os }}-${{ env.IMAGE_CACHE_KEY }}-${{ env.CACHE_VER }}-

      - name: Cache Composer dependencies
        id: cache-composer
        uses: actions/cache@v2
        with:
          path: ./backend/vendor
          key: ${{ runner.os }}-composer-cache-${{ env.CACHE_VER }}-${{ hashFiles('backend/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ env.CACHE_VER }}-

      - name: Docker build
        id: docker-build
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: docker-compose build

      - name: Docker Save
        id: docker-tag-save
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.IMAGE_CACHE_DIR }}
          docker image save -o ${{ env.IMAGE_CACHE_DIR }}/tennis-track_app.tar ${{ env.APP_IMAGE_TAG }}
          docker image save -o ${{ env.IMAGE_CACHE_DIR }}/tennis-track_db.tar ${{ env.MYSQL_IMAGE_TAG }}
          docker image save -o ${{ env.IMAGE_CACHE_DIR }}/tennis-track_nginx.tar ${{ env.NGINX_IMAGE_TAG }}

      - name: Docker load
        id: docker-load
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: ls  -1 ${IMAGE_CACHE_DIR}/*.tar | xargs -L 1 docker load -i

      # # ************* Setup *************
      # - name: Docker Compose Pull
      #   run: docker-compose pull

      - name: Check Docker Compose Images
        run: docker images

      - name: Docker Compose Up
        run: docker-compose up -d

      - name: Docker Compose Process
        run: docker-compose ps -a

      # - name: PHP, Composer Version
      #   run: |
      #     docker-compose exec -T app php --version
      #     docker-compose exec -T app composer --version

      # - name: Composer Install
      #   if: steps.cache-composer.outputs.cache-hit != 'true'
      #   run: docker-compose exec -T app composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      # - name: Composer Dump Autoload
      #   run: docker-compose exec -T app composer dump-autoload -q

      # - name: Laravel Settings
      #   run: |
      #     docker-compose exec -T app cp .env.example .env
      #     docker-compose exec -T app php artisan key:generate
      #     docker-compose exec -T app php artisan optimize
      #     docker-compose exec -T app chmod -R 777 storage bootstrap/cache

      # - name: Laravel Version
      #   run: docker-compose exec -T app php artisan --version

      # - name: Excute Migrate
      #   run: docker-compose exec -T app php artisan migrate

      # # ************* Test *************
      # - name: Rollback Testing
      #   run: docker-compose exec -T app php artisan migrate:refresh

      # - name: Seeding Testing
      #   run: docker-compose exec -T app php artisan db:seed

      # - name: PHP Testing
      #   run: docker-compose exec -T app ./vendor/bin/phpunit

      # - name: Pint Testing
      #   run: docker-compose exec -T app ./vendor/bin/pint --test