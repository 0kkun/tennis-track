name: Backend Testing

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - 'backend/**'
      - '.docker/**'
      - '.github/workflows/**'

# 連続してpushすると一つ前の実行中のjobが停止される設定
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-testing:
    runs-on: ubuntu-latest
    # docker-compose用の環境変数
    env:
      PROJECT_NAME: "tennis_track"
      SOURCE_DIR_NAME: "backend"
      APP_HOST_PORT: 9000
      APP_VITE_HOST_PORT: 5173
      NGINX_HOST_PORT: 80
      DB_HOST_PORT: 3306
      REDIS_HOST_PORT: 6379
      MINIO_HOST_PORT1: 9999
      MINIO_HOST_PORT2: 9001
      MYSQL_DB_NAME: "tennis_track_db"
      MYSQL_USER_NAME: "tennis_track_user"
      MYSQL_PASSWORD: "password"
      MYSQL_ROOT_PASSWORD: "password"

      IMEGE_CACHE_DIR: /tmp/docker-img
      IMAGE_NAME: tennis-track:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ************* Create Cache *************
      - name: Cache Docker layers
        id: cache-docker
        uses: actions/cache@v2
        with:
          path: ${{ env.IMEGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-image-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        id: composer-cache
        with:
          path: ./backend/vendor
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Create image cashe file on fullpath
        run: echo "FILE_PATH=${{env.IMEGE_CACHE_DIR}}/tennis-track-latest.tar" >> "$GITHUB_ENV"

      - name: Load docker image if exist cashe
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: docker load --input ${{ env.FILE_PATH }}

      - name: Build and save to dir if non-exist cashe
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.IMEGE_CACHE_DIR }}
          docker build . --file ./Dockerfile --tag ${{ env.IMAGE_NAME }}
          docker save --output ${{ env.FILE_PATH }} ${{ env.IMAGE_NAME }}

      # # ************* Setup *************
      - name: Docker Compose Up
        run: docker-compose up -d

      - name: Docker Compose Process
        run: docker-compose ps -a

      # - name: PHP, Composer Version
      #   run: |
      #     docker-compose exec -T app php --version
      #     docker-compose exec -T app composer --version

      # - name: Composer Install
      #   if: steps.composer-cache.outputs.cache-hit != 'true'
      #   run: docker-compose exec -T app composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      # - name: Composer Dump Autoload
      #   run: docker-compose exec -T app composer dump-autoload -q

      # - name: Laravel Settings
      #   run: |
      #     docker-compose exec -T app cp .env.example .env
      #     docker-compose exec -T app php artisan key:generate
      #     docker-compose exec -T app php artisan optimize
      #     docker-compose exec -T app chmod -R 777 storage bootstrap/cache

      # - name: Laravel Version
      #   run: docker-compose exec -T app php artisan --version

      # - name: Excute Migrate
      #   run: docker-compose exec -T app php artisan migrate

      # # ************* Test *************
      # - name: Rollback Testing
      #   run: docker-compose exec -T app php artisan migrate:refresh

      # - name: Seeding Testing
      #   run: docker-compose exec -T app php artisan db:seed

      # - name: PHP Testing
      #   run: docker-compose exec -T app ./vendor/bin/phpunit

      # - name: Pint Testing
      #   run: docker-compose exec -T app ./vendor/bin/pint --test